// src/lib/pdf.ts
import { PDFDocument, StandardFonts, rgb } from "pdf-lib";

export type TableSpec = {
  title: string;
  columns: { key: string; header: string; width: number }[]; // width in points
  rows: Record<string, string | number | null | undefined>[];
  footerNote?: string;
};

type HeaderSpec = {
  titleLeft: string;
  titleRight?: string;
  subtitle?: string;
};

export async function createPdfDoc() {
  const doc = await PDFDocument.create();
  const font = await doc.embedFont(StandardFonts.Helvetica);
  const bold = await doc.embedFont(StandardFonts.HelveticaBold);
  return { doc, font, bold };
}

export function addPage(doc: PDFDocument) {
  return doc.addPage([612, 792]); // Letter (portrait)
}

export function drawHeaderFooter(page: any, fonts: {font:any; bold:any}, header: HeaderSpec) {
  const { font, bold } = fonts;
  const { width, height } = page.getSize();
  const margin = 36;

  // Header line
  page.drawLine({ start: { x: margin, y: height - margin - 16 }, end: { x: width - margin, y: height - margin - 16 }, thickness: 1, color: rgb(0.85,0.88,0.92) });

  // Title
  page.drawText(header.titleLeft, { x: margin, y: height - margin - 10 - 16, size: 14, font: bold, color: rgb(0.1,0.12,0.16) });

  if (header.titleRight) {
    const textWidth = bold.widthOfTextAtSize(header.titleRight, 12);
    page.drawText(header.titleRight, { x: width - margin - textWidth, y: height - margin - 10 - 16, size: 12, font, color: rgb(0.25,0.28,0.35) });
  }
  if (header.subtitle) {
    page.drawText(header.subtitle, { x: margin, y: height - margin - 10 - 16 - 18, size: 10, font, color: rgb(0.35,0.38,0.45) });
  }

  // Footer
  page.drawLine({ start: { x: margin, y: margin + 22 }, end: { x: width - margin, y: margin + 22 }, thickness: 1, color: rgb(0.85,0.88,0.92) });
  page.drawText("Generated by Benefits Builder", { x: margin, y: margin + 8, size: 9, font, color: rgb(0.35,0.38,0.45) });
}

export function drawTable(opts: {
  page: any;
  fonts: {font:any; bold:any};
  table: TableSpec;
  topY: number; // starting Y
}) {
  const { page, fonts, table, topY } = opts;
  const { font, bold } = fonts;
  const { width } = page.getSize();
  const margin = 36;
  const rowH = 18;
  const headerH = 22;
  const minY = 72; // margin + footer area

  let y = topY;

  // Title
  page.drawText(table.title, { x: margin, y: y - 2, size: 12, font: bold, color: rgb(0.12,0.14,0.18) });
  y -= 22;

  // Header row background
  page.drawRectangle({ x: margin, y: y - headerH + 4, width: width - margin * 2, height: headerH, color: rgb(0.95,0.96,0.98) });

  // Column headers
  let x = margin + 6;
  for (const col of table.columns) {
    page.drawText(col.header, { x, y: y, size: 10, font: bold, color: rgb(0.25,0.28,0.35) });
    x += col.width;
  }
  y -= headerH + 2;

  // Rows
  for (const r of table.rows) {
    // Check pagination
    if (y < minY + rowH) {
      // signal caller we ran out of space
      return { nextY: y, exhausted: true };
    }
    let cx = margin + 6;
    for (const col of table.columns) {
      const val = r[col.key];
      const text = val === null || typeof val === "undefined" ? "â€”" : String(val);
      page.drawText(text, { x: cx, y, size: 10, font, color: rgb(0.1,0.12,0.16) });
      cx += col.width;
    }
    y -= rowH;
  }

  if (table.footerNote) {
    if (y < minY + rowH) {
      return { nextY: y, exhausted: true };
    }
    page.drawText(table.footerNote, { x: margin, y: y - 6, size: 9, font, color: rgb(0.35,0.38,0.45) });
    y -= rowH;
  }

  return { nextY: y, exhausted: false };
}
